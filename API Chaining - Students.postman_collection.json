{
	"info": {
		"_postman_id": "cd1a6406-e5a8-4c6e-887e-b9fe0c485e33",
		"name": "API Chaining - Students",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33996954"
	},
	"item": [
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"id\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Nathan\",\r\n    \"location\": \"Dubai\",\r\n    \"phone\": \"012\",\r\n    \"courses\": [\r\n        \"SQL\",\r\n        \"MySQL\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code contains 'OK' as a string\", () => {\r",
							"    pm.expect(pm.response).to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () =>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Successful GET Request\", ()=> {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content_Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie ‘language’ is present\", () => {\r",
							"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Cookie ‘language’ has value 'en-gb'\", () => {\r",
							"    pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"   pm.expect(jsonData).to.be.an(\"object\");\r",
							"   pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"   pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => {\r",
							"   pm.expect(jsonData.courses).to.include(\"SQL\");\r",
							"   pm.expect(jsonData.courses).to.have.members([\"SQL\", \"MySQL\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Value of response body is correct\", () => {\r",
							"   var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.id).to.eql((pm.environment).get(\"id\"));\r",
							"   pm.expect(jsonData.name).to.eql(\"Nathan\");\r",
							"   pm.expect(jsonData.location).to.eql(\"Dubai\");\r",
							"   pm.expect(jsonData.phone).to.eql(\"012\");\r",
							"   pm.expect(jsonData.courses[0]).to.eql(\"SQL\");\r",
							"   pm.expect(jsonData.courses[1]).to.eql(\"MySQL\");\r",
							"});\r",
							"\r",
							"//JSON Schema Validation\r",
							"\r",
							"let schema = \r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}